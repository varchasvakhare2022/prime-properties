# ===========================================
# Prime Properties - Railway Production Configuration
# ===========================================

# ===========================================
# Database Configuration (Railway PostgreSQL)
# ===========================================
# Railway provides DATABASE_URL environment variable
# Fallback to local PostgreSQL for development

spring.datasource.url=${SPRING_DATASOURCE_URL:${DATABASE_URL:jdbc:postgresql://localhost:5432/prime_properties}}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:${DB_USERNAME:postgres}}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:${DB_PASSWORD:postgres}}
spring.datasource.driver-class-name=org.postgresql.Driver

# ===========================================
# JPA/Hibernate Configuration
# ===========================================
# Railway production settings
spring.jpa.hibernate.ddl-auto=${JPA_DDL_AUTO:update}
spring.jpa.show-sql=${JPA_SHOW_SQL:false}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=${JPA_FORMAT_SQL:false}

# ===========================================
# Data Initialization
# ===========================================
# Only initialize data in development, not production
spring.sql.init.mode=${SQL_INIT_MODE:never}
spring.sql.init.data-locations=classpath:data.sql
spring.sql.init.continue-on-error=true

# ===========================================
# JWT Configuration
# ===========================================
# JWT secret from Railway environment variables
app.jwt.secret=${JWT_SECRET:sample_secret_for_testing}
app.jwt.expiration=${JWT_EXPIRATION:86400000}

# ===========================================
# Google OAuth 2.0 Configuration
# ===========================================
# Google OAuth credentials from Railway environment variables
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${FRONTEND_URL:https://prime-properties.up.railway.app}/auth/google/callback

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=id

# ===========================================
# Server Configuration
# ===========================================
# Railway sets PORT environment variable
server.port=${PORT:8080}

# ===========================================
# Railway Proxy Trust Configuration
# ===========================================
# Trust Railway's HTTPS proxy headers
server.forward-headers-strategy=native
server.use-forward-headers=true
server.tomcat.remoteip.remote-ip-header=X-Forwarded-For
server.tomcat.remoteip.protocol-header=X-Forwarded-Proto
server.tomcat.remoteip.protocol-header-https-value=https

# ===========================================
# Logging Configuration
# ===========================================
# Production logging levels
logging.level.com.primeproperties=${LOG_LEVEL_PRIME:INFO}
logging.level.org.springframework.security=${LOG_LEVEL_SECURITY:WARN}
logging.level.org.hibernate.SQL=${LOG_LEVEL_HIBERNATE:WARN}
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=${LOG_LEVEL_HIBERNATE_BINDER:WARN}
logging.level.org.springframework.web=${LOG_LEVEL_WEB:INFO}

# ===========================================
# CORS Configuration
# ===========================================
# Railway frontend domain
spring.web.cors.allowed-origins=${CORS_ALLOWED_ORIGINS:https://prime-properties.up.railway.app}
spring.web.cors.allowed-methods=${CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS,PATCH}
spring.web.cors.allowed-headers=${CORS_ALLOWED_HEADERS:Authorization,Content-Type,X-Requested-With,Accept,Origin}
spring.web.cors.allow-credentials=${CORS_ALLOW_CREDENTIALS:true}
spring.web.cors.max-age=${CORS_MAX_AGE:3600}

# ===========================================
# Security Headers for OAuth
# ===========================================
# Configure headers for Railway HTTPS deployment
server.servlet.session.cookie.same-site=${SESSION_COOKIE_SAME_SITE:none}
server.servlet.session.cookie.secure=${SESSION_COOKIE_SECURE:true}

# ===========================================
# Railway Production Settings
# ===========================================
# Disable unnecessary features for production
management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTS:health,info}
management.endpoint.health.show-details=${HEALTH_SHOW_DETAILS:when-authorized}

# Connection pooling for Railway
spring.datasource.hikari.maximum-pool-size=${DB_POOL_SIZE:10}
spring.datasource.hikari.minimum-idle=${DB_MIN_IDLE:5}
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:300000}
spring.datasource.hikari.max-lifetime=${DB_MAX_LIFETIME:1200000}
spring.datasource.hikari.connection-timeout=${DB_CONNECTION_TIMEOUT:20000}