# ===========================================
# Prime Properties - Application Configuration
# ===========================================

# ===========================================
# Database Configuration (PostgreSQL)
# ===========================================
# Configure your PostgreSQL database connection
# Default values work with local PostgreSQL setup
# IMPORTANT: Replace username and password with your actual database credentials

spring.datasource.url=jdbc:postgresql://localhost:5432/prime_properties
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# ===========================================
# JPA/Hibernate Configuration
# ===========================================
# Controls how Hibernate manages database schema
# Options: validate, update, create, create-drop, none
# - update: Updates schema, keeps existing data (recommended for development)
# - create-drop: Creates fresh schema each run, drops on shutdown (for testing)
# - validate: Only validates schema, fails if changes detected (for production)

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# ===========================================
# Data Initialization
# ===========================================
# Automatically loads sample data from data.sql on startup
spring.sql.init.mode=always
spring.sql.init.data-locations=classpath:data.sql
spring.sql.init.continue-on-error=true

# ===========================================
# JWT Configuration
# ===========================================
# JWT secret key for token signing and validation
# IMPORTANT: Change this secret in production environment!
# Use a strong, random secret key for security
# Default value is for testing only

app.jwt.secret=${JWT_SECRET:sample_secret_for_testing}
app.jwt.expiration=${JWT_EXPIRATION:86400000}

# ===========================================
# Google OAuth 2.0 Configuration
# ===========================================
# Google OAuth 2.0 credentials for authentication
# IMPORTANT: Replace with your actual Google OAuth credentials!
# Get these from Google Cloud Console: https://console.cloud.google.com/

spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:your-google-client-id}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET:your-google-client-secret}
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=${FRONTEND_URL:https://prime-properties.up.railway.app}/api/auth/callback/google

spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-name-attribute=id

# ===========================================
# Server Configuration
# ===========================================
# Port where the Spring Boot application will run
# Frontend expects backend on port 8080
server.port=8080

# ===========================================
# Logging Configuration
# ===========================================
# Control logging levels for debugging
# Set to INFO or WARN for production
logging.level.com.primeproperties=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# ===========================================
# CORS Configuration
# ===========================================
# Allow frontend to make requests to backend
# Configure allowed origins for production (Railway deployment)
spring.web.cors.allowed-origins=${FRONTEND_URL:https://prime-properties.up.railway.app},http://localhost:3000,http://localhost:5173
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS,PATCH
spring.web.cors.allowed-headers=Authorization,Content-Type,X-Requested-With,Accept,Origin,Cross-Origin-Opener-Policy,Cross-Origin-Embedder-Policy
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600

# ===========================================
# Security Headers for OAuth
# ===========================================
# Configure headers to prevent Cross-Origin-Opener-Policy errors
server.servlet.session.cookie.same-site=none
server.servlet.session.cookie.secure=true

# ===========================================
# Configuration Notes
# ===========================================
# 
# 1. Database Setup:
#    - Install PostgreSQL locally
#    - Create database: CREATE DATABASE prime_properties;
#    - Update username/password above if different from defaults
#
# 2. JWT Secret:
#    - Generate a strong secret: openssl rand -base64 32
#    - Or use online generator for production
#    - Keep secret secure and never commit to version control
#
# 3. Schema Management:
#    - Use 'update' for development (keeps data)
#    - Use 'create-drop' for testing (fresh schema each run)
#    - Use 'validate' for production (no schema changes)
#
# 4. Sample Data:
#    - data.sql automatically loads sample users and properties
#    - Sample credentials: developer@prime.com / DevPass123
#    - Sample credentials: customer@prime.com / CustPass123
#
# 5. Production Considerations:
#    - Use environment variables for sensitive data
#    - Enable HTTPS
#    - Configure proper CORS origins
#    - Set appropriate logging levels
#    - Use connection pooling for better performance
#
# ===========================================